{"version":3,"sources":["../../../app/controller/service.js"],"names":["underscore","require","node_ssh","SSH","field","module","exports","HomeController","ctx","user_id","query","undefined","error","app","knex","where","status","select","result","length","success","service_id","id","body","request","service_tag_text_obj","test","official","queryField","config","map","key","port","remark","service_tag","checkService","check_resulr","updated_at","Date","update","created_at","insert","getId","msg","data","LoginService","Promise","resolve","reject","connect","host","ip","username","account","privateKey","ssh_key","then","res","catch","err","String","outPut","Controller"],"mappings":"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","file":"service.js","sourcesContent":["'use strict';\nconst underscore = require('underscore');\nconst node_ssh = require('node-ssh');\nconst SSH = new node_ssh();\nconst field = ['id','ip','name','account','pkey','ssh_key','port','service_tag','service_tag_text','service_tag','updated_at','remark','status'];\nmodule.exports = app => {\n    class HomeController extends app.Controller {\n        // 列表\n        * list(ctx) {\n            const user_id = ctx.query.user_id;\n            if (user_id == undefined) {\n                this.error('参数有误', 200);\n                return;\n            }\n            // let page = ctx.query.page || 1;\n            // let pageSize = ctx.query.pageSize || 20;\n            // pageSize = parseInt(pageSize);\n            // let start = (page -1) * pageSize;\n            // start <= 0 && (start =1);\n            let result = yield ctx.app.knex('service').where({user_id,status: 1}).select(field); //.limit(pageSize-1).offset(start-1);\n            if(result.length) {\n                this.success(result)\n            } else {\n                this.error('没有查询到相关数据', 200);\n            }\n        }\n        // 通过服务器id 查询该条数据\n        * service_by_id(ctx) {\n            let user_id = ctx.query.user_id;\n            let service_id = ctx.query.service_id;\n            if (!user_id || !service_id) {\n                this.error('参数有误', 200);\n                return;\n            }\n            const result = yield ctx.app.knex('service').select(field).where({\n                id: service_id,\n                user_id: user_id\n            });\n            if (result.length) {\n                this.success(result[0])\n            } else {\n                this.error('没有查到相关数据');\n            }\n        }\n        // 操作\n        * operate(ctx) {\n            const body = ctx.request.body;\n            const service_tag_text_obj = {\n                test: '测试服务器',\n                official: '正式服务器'\n            };\n            const queryField = ['user_id','name','ip','account','pkey','ssh_key'];\n            let config ={};\n            queryField.map((key) => {\n                if (!body[key]) {\n                    this.error(`${key} 参数不能为空`);\n                    return;\n                } else {\n                    config[key] = body[key]\n                }\n            });\n            const id = body.id;\n            const port = body.port || 80;\n            config.port = port;\n            const remark = body.remark || '';\n            config.remark = remark;\n            const status = body.status || 0;\n            config.status = status;\n            config['service_tag'] = body.service_tag || 'test';\n            config['service_tag_text'] = service_tag_text_obj[config['service_tag']] || '测试服务器';\n            let check_resulr = yield this.checkService(config);\n            if (!check_resulr.status) {\n                this.error({\n                    error: check_resulr.error\n                }, 200);\n                return;\n            }\n            let result;\n            // 添加或者更新服务器\n            if (id) {\n                config.id = id;\n                config.updated_at = new Date();\n                yield this.app.knex('service').update(config).where({\n                    id: id\n                });\n                result = yield this.app.knex('service').where({\n                    id: id,\n                    status: 1\n                })\n            } else { // 添加服务器\n                config.created_at = new Date();\n                config.updated_at = new Date();\n                config.status = 1;\n                var getId = yield this.app.knex('service').insert(config);\n                result = yield this.app.knex('service').select(field).where({\n                    id: getId[0],\n                    status: 1\n                })\n            }\n            if (status === 0) {\n                ctx.body = {\n                    status: 'S',\n                    msg: '数据删除成功',\n                    data: []\n                }\n            }\n            this.success(result[0]);\n\n        }\n        // 检查服务器是否可用\n        * checkService(config) {\n            const LoginService = new Promise((resolve,reject) => {\n                SSH.connect({\n                    host: config.ip,\n                    username: config.account,\n                    privateKey: config.ssh_key\n                }).then((res) => {\n                    resolve({\n                        msg: '登录成功',\n                        status: true\n                    })\n                }).catch((err) => {\n                    reject({\n                        msg: '登录失败',\n                        status: false,\n                        error: String(err)\n                    })\n                })\n            })\n            let outPut;\n            const result = yield LoginService.then((res) => {\n                outPut = res;\n            }).catch((res) => {\n                outPut = res;\n            });\n            return outPut;\n        }\n\n    }\n   return HomeController;\n};\n"]}