{"version":3,"sources":["../../../app/controller/webhook.js"],"names":["underscore","require","shell","SimmpleGit","path","node_ssh","SSH","serverField","webhookField","deployStatusText","webhook_deploy_field","module","exports","HomeController","ctx","user_id","query","app","knex","select","where","status","result","size","length","i","service_ids","serviceId","split","whereIn","service","service_id","undefined","success","error","body","request","project_id","webhook_id","id","serviceIds","remark","config","updated_at","Date","update","inset_service_deploy","console","time","token","webhookResult","serviceArr","projectInfo","check_package_json","webhookConfigResult","git_clone_to_local","gitProject","timeEnd","deploy_project_to_service","Object","assign","data","webhook","deployProject","save_deploy_log","failed_file","successful_file","serviceObj","webhookConfigObj","failed","successful","deployPrpmise","Promise","resolve","reject","connect","host","ip","username","account","privateKey","ssh_key","then","log","putDirectory","shell_pwd_stdout","project_name","build_path","remote_deploy_path","recursive","concurrency","validate","itemPath","baseName","basename","substr","tick","localPath","remotePath","push","join","status_code","msg","catch","err","toString","res","webhook_local_path","cd","pwd","stdout","shell_code_project_name","find","code","gitPromise","Git","pull","ssh_url","mkdir","setTimeout","clone","dir","gitP","GitMsg","curl","web_url","dataType","description","webhookConfig","deployInfo","git_url","user_name","git_tags","deploy_status","deploy_status_text","created_at","fail_file","success_file","service_ip","service_account","insert","webhook_deploy_config","delpoySuccess","queryField","output_field","queryConfig","Controller"],"mappings":"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","file":"webhook.js","sourcesContent":["'use strict';\nconst underscore = require('underscore');\nconst shell = require('shelljs');\nconst SimmpleGit = require('simple-git');\nconst path = require('path');\nconst node_ssh = require('node-ssh');\nconst SSH = new node_ssh();\n// 服务器列表字段\nconst serverField = ['id','account','pkey','ip','ssh_key','port','service_tag_text','service_tag','updated_at','remark','status'];\n// webhook 列表字段\nconst  webhookField = ['id','user_id','user_name','project_id','project_name','web_url','ssh_url','git_tags','service_ids','deploy_status_text','deploy_status','status','updated_at','remark'];\nconst deployStatusText = {\n    '-1': '没有查询到该项目package.json webhook配置项',\n    '0': '尚未部署',\n    '100': '部署失败',\n    \"200\": 'git clone项目失败',\n    \"201\": 'git pull项目失败',\n    \"202\": 'git 代码下载失败',\n    '300': '登录服务器失败',\n    \"400\": '本地代码克隆岛远程失败',\n    '500': '服务器部署成功',\n    '505': '服务器部署失败',\n    '600': '未知错误'\n};\nconst webhook_deploy_field = ['webhook_id','project_id','user_id','deploy_status','deploy_status_text'];\nmodule.exports = app => {\n    class HomeController extends app.Controller {\n        // 查询 webhook 列表\n        *list(ctx) {\n            const user_id = ctx.query.user_id;\n            // const page = ctx.query.page || 1;\n            // const pageSize = ctx.query.pageSize || 20;\n            // if (user_id == undefined) {\n            //     this.error('参数有误');\n            //     return;\n            // }\n            var result = yield ctx.app.knex('webhook').select(webhookField).where({\n                status: 1,\n                user_id: user_id\n            });\n            const size = result.length;\n            //result = result.splice((page-1) * pageSize , pageSize);\n            for (var i = 0;i < result.length; i ++) {\n                if (result[i].service_ids) {\n                    let serviceId = result[i].service_ids.split(',');\n                    result[i].service = yield this.app.knex('service')\n                        .select(serverField)\n                        .whereIn('id', serviceId)\n                        .where({\n                            user_id: user_id,\n                            status: 1\n                        });\n                } else {\n                    result[i].service_id = undefined;\n                    result[i].service = []\n                }\n            }\n            if (result.length) {\n                this.success(result);\n            } else {\n                this.error('没有查询到相关数据',200)\n            }\n        }\n        // 更新或者删除 webhook 项目\n        *operate(ctx) {\n            const body = ctx.request.body;\n            const user_id = ctx.request.body.user_id;\n            const project_id = ctx.request.body.project_id;\n            // 插入数据\n            var webhook_id = body.id;\n            var service_ids = body.service_ids || '';\n            let serviceIds = [];\n            if (service_ids) {\n                serviceIds = service_ids.split(',');\n            };\n            var status = body.status? 1 : 0;\n            var remark = body.remark;\n            var config = {};\n            if (webhook_id == undefined || !user_id) {\n                this.error('参数有误', 200);\n                return;\n            }\n            config.updated_at = new Date();\n            config.status = status;\n\n            if (service_ids != undefined ) {\n                config.service_ids = service_ids\n            }\n            if (remark != undefined) {\n                config.remark = remark\n            }\n            yield ctx.app.knex('webhook').update(config).where({\n                id: webhook_id\n            });\n            let result = yield ctx.app.knex('webhook').select(webhookField).where({\n                id: webhook_id\n            });\n            yield this.inset_service_deploy(user_id,project_id,webhook_id,serviceIds);\n            result = result[0];\n            if (result) {\n                if (serviceIds.length) {\n                    result.service = yield ctx.app.knex('service')\n                        .select(serverField)\n                        .whereIn('id', serviceIds)\n                        .where({\n                            user_id: user_id,\n                            status: 1\n                        });\n                }\n                this.success(result);\n            } else {\n               this.error('添加失败');\n            }\n        }\n        *deploy(ctx) { //\n            console.time('部署总用时');\n            const id = ctx.query.id; // webhook id\n            const token = ctx.query.token; // token\n            const service_id = ctx.query.service_id; // 对应服务器 id\n            if (!id || !token || !service_id) {\n                this.error('参数有误', 200);\n                return;\n            }\n\n            const webhookResult = yield this.app.knex('webhook').where({\n                id: id\n            });\n            let serviceArr = yield this.app.knex('service').where('id', service_id);\n            if (!webhookResult.length || !serviceArr.length) {\n                this.error('没有查询到项目以及服务器配置信息');\n                return;\n            }\n            // webhook 配置项\n            let projectInfo = webhookResult[0];\n            // 添加 服务器id\n            projectInfo.service_id = service_id;\n            /**\n             * 环节一 查询 package.json 配置项 是否完整\n             *  method check_package_json\n             * */\n            const webhookConfigResult = yield this.check_package_json(projectInfo, token);\n            if (!webhookConfigResult) {\n                this.error('package.json 配置不完整');\n                return;\n            }\n            /**\n            * 环节二 将远程代码 克隆到 webhook 项目本地\n             *\n            * */\n            console.time('git');\n            const gitProject = yield this.git_clone_to_local(projectInfo);\n\n            if (!gitProject) {\n                this.error('git 命令执行失败 ');\n                return;\n            }\n            console.timeEnd('git');\n            /**\n             * 环节四  查询配置服务器\n             * 登录远程服务器\n             *  更加 项目的package.json webhhok配置 分部署代码\n             * */\n            console.time('部署服务器');\n            const deployProject = yield this.deploy_project_to_service(serviceArr[0],Object.assign({},gitProject,webhookConfigResult.data.webhook,projectInfo));\n            yield this.save_deploy_log(projectInfo,deployProject);\n            console.timeEnd('部署服务器');\n            console.timeEnd('部署总用时');\n            if (deployProject.status) {\n                this.success({\n                    failed_file: deployProject.failed_file,\n                    successful_file: deployProject.successful_file\n                });\n            } else {\n                this.error(deployProject);\n            }\n\n        }\n        /**\n         * 查询配置服务器 并配置服务器 并将 build 文件克隆到远程主机\n         *\n         * */\n         *deploy_project_to_service(serviceObj, webhookConfigObj) {\n            let failed = [], successful =[];\n            const deployPrpmise = new Promise((resolve, reject) => {\n                SSH.connect({\n                    host: serviceObj.ip,\n                    username: serviceObj.account,\n                    privateKey: serviceObj.ssh_key\n                }).then(() => {\n                    console.log('=========>>服务器登录成功');\n                    SSH.putDirectory(`${webhookConfigObj.shell_pwd_stdout}/${webhookConfigObj.project_name}${webhookConfigObj.build_path}`, `${webhookConfigObj.remote_deploy_path}`,{\n                        recursive: true,\n                        concurrency: 100,\n                        validate: function(itemPath) {\n                            const baseName = path.basename(itemPath)\n                            return baseName.substr(0, 1) !== '.' && // do not allow dot files\n                                baseName !== 'node_modules' // do not allow node_modules\n                        },\n                        tick: function(localPath, remotePath, error) {\n                            if (error) {\n                                failed.push(localPath)\n                            } else {\n                                successful.push(localPath)\n                            }\n                        }\n                    }).then((status) => {\n                        console.log('=========>>目标文件部署', status ? '完成' : '失败');\n                        console.log('=========>>文件部署失败', failed.join(' ||=|| '));\n                        console.log('=========>>文件部署成功', successful.join(' ||=|| '));\n                        resolve({\n                            status_code: 500,\n                            msg: `部署成功 `,\n                            status: true,\n                            failed_file:failed.join('##'),\n                            successful_file: successful.join(',')\n                        })\n                    }).catch((err) => {\n                        console.log('=========>>服务器部署 失败 ', err.toString());\n                        reject({\n                            status_code: 100,\n                            status: false,\n                            msg: `部署失败 error: ${err.toString()}`\n                        });\n                    })\n                }).catch((err) => {\n                    console.log('=========>>服务器登录 失败 ', err.toString());\n                    reject({\n                        status_code: 300,\n                        status: false,\n                        err: err.toString(),\n                        msg: '登录失败'\n                    });\n                })\n            });\n            const deployProject = yield deployPrpmise.then(function(res) {\n                return res;\n            }).catch(function(err) {\n                return {\n                    status_code: 100,\n                    status: false,\n                    error: err.toString()\n                }\n            });\n            return deployProject;\n        }\n\n        /**\n         *   git clone 远程代码 克隆到本地\n         *   定义 项目存储的本地位置\n         *   cd 项目存储的文件夹下 并获取当前目录绝对路径 赋值给 变量 shell_pwd_stdout\n         *   查询当前目录是否有该项目 如果有 git pull 没有 git clone\n         *   定义项目 拉取和clone permise 函数\n         *   git pull\n         *     cd 到 项目所在目录 pull\n         *   git clone\n         *     创建以项目名称命名的文件夹\n         *\n         * */\n        *git_clone_to_local(projectInfo) {\n            // 本地存储项目的位置\n            const webhook_local_path =   '/home/hewenshan/yaojiasong/webhook-git'; //'/Users/yaojiasong/gooagoo/project/node';//\n            // cd 存储项目\n            shell.cd(webhook_local_path);\n            const shell_pwd_stdout = shell.pwd().stdout;\n            const shell_code_project_name = shell.find(projectInfo.project_name).code;\n            const gitPromise = new Promise((resolve, reject) => {\n                if (shell_code_project_name == 0) { // git pull\n                    console.log('=========>>git pull 开始');\n                    let Git = SimmpleGit(`${webhook_local_path}/${projectInfo.project_name}`);\n                    Git.pull(function(err) {\n                        if (err) {\n                            console.log(`=========>>git pull 失败 ${err.toString()}`);\n                            reject({\n                                status: false,\n                                status_code: 201,\n                                msg: `git pull ${projectInfo.ssh_url} error: ${err.toString()} 拉取失败`,\n                                err:err.toString()\n                            });\n                        } else {\n                            console.log('=========>>git pull 成功');\n                            resolve({\n                                status: true,\n                                msg: 'git pull 拉取成功'\n                            });\n                        }\n\n                    })\n                } else {\n                    let Git = SimmpleGit(); // 克隆文件\n                    console.log('=========>>git clone 开始');\n                    shell.mkdir(projectInfo.project_name);\n                    setTimeout(function(){}, 100);\n                     Git.clone(projectInfo.ssh_url, `${shell_pwd_stdout}/${projectInfo.project_name}`, function(err, dir) {\n                        if(err) {\n                            console.log(`=========>>git clone 失败 ${err.toString()}`);\n                            reject({\n                                status: false,\n                                status_code: 200,\n                                msg: ` git clone  ${projectInfo.ssh_url} error:${err.toString()} 克隆失败`\n                            });\n                        } else {\n                            console.log('=========>>git clone 成功');\n                            resolve({\n                                status: true,\n                                msg: '克隆成功'\n                            });\n                        }\n                    })\n                }\n            });\n            var gitP = yield gitPromise.then(function(res) {\n                return res;\n            }).catch(function(err){\n                return {\n                    error: err.toString(),\n                    status_code: 100,\n                    status: false\n                };\n            });\n\n            if (!gitP.status) { // git 失败\n                yield this.save_deploy_log(projectInfo, gitP);\n                return false;\n            }\n            return {\n                GitMsg:gitP,\n                webhook_local_path: webhook_local_path,\n                shell_pwd_stdout\n            };\n        }\n\n        /**\n         * 查询 package.json 配置项 是否完整\n         * */\n\n        *check_package_json(projectInfo, token) {\n            const webhookConfigResult = yield this.app.curl(`${projectInfo.web_url}/raw/master/package.json?private_token=${token}`,{\n                dataType: 'json'\n            });\n            // 环节一 查询项目package.json\n            if (!webhookConfigResult.data) {\n                yield this.save_deploy_log(Object.assign(projectInfo),{\n                    status_code:-1,\n                    description:'没有获取到package.json信息'\n                });\n                return false;\n            }\n            // 获取package.json 配置 webhook\n            const webhookConfig = webhookConfigResult.data.webhook;\n\n            // 环节二 查询配置项 查询配置项 是否完整\n            if (!webhookConfig || !webhookConfig.build_path || !webhookConfig.remote_deploy_path){\n                yield this.save_deploy_log(projectInfo, {\n                    status_code:-1,\n                    description:'该项目没有配置或者配置不完整'\n                });\n                return false;\n            }\n            return  webhookConfigResult;\n        }\n\n        *save_deploy_log(projectInfo,deployInfo, git_url) {\n            const deployStatusText = {\n                '-1': '没有查询到该项目package.json webhook配置项',\n                '0': '尚未部署',\n                '100': '部署失败',\n                \"200\": 'git clone项目失败',\n                \"201\": 'git pull项目失败',\n                '300': '登录服务器失败',\n                \"400\": '本地代码克隆岛远程失败',\n                '500': '服务器部署成功',\n                '505': '服务器部署失败',\n                '600': '未知错误'\n            };\n            var config = {\n                project_id: projectInfo.project_id,\n                project_name: projectInfo.project_name,\n                user_id: projectInfo.user_id,\n                user_name: projectInfo.user_name,\n                ssh_url: projectInfo.ssh_url,\n                web_url: projectInfo.web_url,\n                service_id: projectInfo.service_id,\n                git_tags: projectInfo.git_tags,\n                remark: deployInfo.description || deployInfo.msg,\n                deploy_status: deployInfo.status_code,\n                deploy_status_text: deployInfo.msg || deployStatusText[deployInfo.status_code] || '未知错误',\n                created_at: new Date()\n            };\n            if (deployInfo.error) {\n                config.error = deployInfo.error;\n            }\n            if (git_url) {\n                config['git_back_ssh_url'] = git_url;\n            }\n            if (deployInfo.fail_file) {\n                config.fail_file = deployInfo.fail_file\n            }\n            if (deployInfo.err) {\n                config.error = deployInfo.err;\n            }\n            if (deployInfo.success_file) {\n                config.success_file = deployInfo.success_file\n            }\n            if (deployInfo.service) {\n                config.service_ip = deployInfo.service.ip;\n                config.service_account = deployInfo.service.account;\n            }\n            yield this.app.knex('webhook_deploy_log').insert(config);\n            let webhook_deploy_config = {\n                deploy_status: deployInfo.status_code,\n                deploy_status_text: deployInfo.msg || deployStatusText[deployInfo.status_code] || '未知错误'\n            };\n            try {\n                yield this.app.knex('webhook_service_deploy').update(webhook_deploy_config).where({\n                    project_id:projectInfo.project_id,\n                    user_id: projectInfo.user_id,\n                    webhook_id:projectInfo.id,\n                    service_id: projectInfo.service_id\n                });\n            } catch (err) {\n\n            }\n            var webhookConfig = {\n                deploy_status: deployInfo.status_code || 0,\n                deploy_status_text: deployStatusText[deployInfo.status_code] || '未知错误',\n                updated_at: new Date()\n            };\n            yield this.app.knex('webhook').update(webhookConfig).where({\n                project_id: projectInfo.project_id,\n                user_id: projectInfo.user_id\n            });\n            if (deployInfo.status === 500) {\n                this.delpoySuccess(deployInfo.status,deployInfo.description);\n            } else {\n                this.success(deployInfo);\n            }\n        }\n        * deploy_log(ctx){\n            let queryField = ['project_id','user_id','webhook_id'];\n            let output_field = ['deploy_status','deploy_status_text', 'service_id'];\n            let query = ctx.query;\n            let queryConfig = {};\n            for (let i =0;i< queryField.length; i++) {\n                if (!query[queryField[i]]) {\n                    this.error(`${queryField[i]} 参数为空`)\n                    return\n                }\n                queryConfig[queryField[i]] = query[queryField[i]];\n            }\n            const result = yield ctx.app.knex('webhook_service_deploy').select(output_field).where(queryConfig);\n            if (result[0]) {\n                this.success(result);\n            } else {\n                this.error('没有查询到该项目的配置信息，请重新配置项目')\n            }\n        }\n    }\n    return HomeController;\n};\n"]}